
name: homelab-dev-stack

services:

  nginx:
    image: docker.io/nginx:1.27.0
    container_name: homelab-nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/public:/usr/share/nginx/html:rw
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - network-reverse-proxy


  # https://hub.docker.com/r/osixia/openldap
  openldap:
    image: docker.io/osixia/openldap
    container_name: homelab-openldap
    environment:
      LDAP_ORGANISATION: "OpenLDAP"
      LDAP_DOMAIN: "openldap.com"
      LDAP_ADMIN_PASSWORD: "admin"
    networks:
      - network-reverse-proxy

  # https://hub.docker.com/r/osixia/phpldapadmin
  #   Login DN: "cn=admin,dc=openldap,dc=com"
  #   Password: "admin"
  phpldapadmin:
    image: docker.io/osixia/phpldapadmin
    container_name: homelab-phpldapadmin
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: openldap
      PHPLDAPADMIN_HTTPS: false
    volumes:
      - volume-phpldapadmin:/var/www/phpldapadmin
    networks:
      - network-reverse-proxy
    depends_on:
      - openldap


  # https://docs.portainer.io/start/install-ce/server/docker/linux
  portainer:
    image: docker.io/portainer/portainer-ce:2.20.3
    container_name: homelab-portainer
    restart: always
    privileged: true
    volumes:
      - /srv/portainer/data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - network-reverse-proxy


  # https://docs.gitlab.com/ee/install/docker.html
  gitlab:
    image: docker.io/gitlab/gitlab-ee:16.10.3-ee.0
    container_name: homelab-gitlab
    restart: always
    shm_size: 256m
    environment:
      GITLAB_OMNIBUS_CONFIG: "from_file('/etc/gitlab/omnibus_config.rb')"
    volumes:
      - /srv/gitlab/config:/etc/gitlab
      - /srv/gitlab/logs:/var/log/gitlab
      - /srv/gitlab/data:/var/opt/gitlab
      - ./gitlab/omnibus_config.rb:/etc/gitlab/omnibus_config.rb
    networks:
      - network-reverse-proxy
      - network-gitlab

  # https://docs.gitlab.com/runner/install/docker.html
  gitlab-runner:
    image: docker.io/gitlab/gitlab-runner:latest
    container_name: homelab-gitlab-runner
    restart: always
    env_file:
      - ../proxy.env
    volumes:
      - /srv/gitlab-runner/config:/etc/gitlab-runner
      - /srv/gitlab-runner/home:/home/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - network-gitlab


  # https://github.com/jenkinsci/docker/blob/master/README.md
  jenkins:
    image: docker.io/jenkins/jenkins:lts
    container_name: homelab-jenkins
    # env_file:
    #   - ../proxy.env
    environment:
      - "JENKINS_OPTS=--prefix=/jenkins"
    volumes:
      - volume-jenkins:/var/jenkins_home
    networks:
      - network-reverse-proxy
      - network-jenkins

  jenkins-ssh:
    image: docker.io/jenkins/ssh-agent:latest
    container_name: homelab-jenkins-ssh
    volumes:
      - volume-jenkins-ssh-agent:/home/jenkins/agent
      - volume-jenkins-ssh-tmp:/tmp
      - volume-jenkins-ssh-dot:/home/jenkins/.jenkins
      - volume-jenkins-ssh-run:/run
      - volume-jenkins-ssh-varrun:/var/run
    networks:
      - network-jenkins


  redmine:
    image: redmine:revpro
    build:
      context: .
      dockerfile: ./redmine/Dockerfile
    container_name: homelab-redmine
    environment:
      REDMINE_DB_POSTGRES: homelab-redmine-db
      REDMINE_DB_DATABASE: redmine
      REDMINE_DB_USERNAME: redmine_user
      REDMINE_DB_PASSWORD: redmine_pass
      REDMINE_SECRET_KEY_BASE: supersecretkey
      REDMINE_DB_PORT: 5432
    volumes:
      - volume-redmine:/usr/src/redmine/files
    networks:
      - network-reverse-proxy
      - network-redmine
    depends_on:
      redmine-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/redmine/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s


  redmine-db:
    image: docker.io/postgres:16.3
    container_name: homelab-redmine-db
    environment:
      POSTGRES_DB:       redmine
      POSTGRES_USER:     redmine_user
      POSTGRES_PASSWORD: redmine_pass
    volumes:
      - volume-redmine-db:/var/lib/postgresql/data
    networks:
      - network-redmine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  # https://gethomepage.dev/latest/configs/docker/#using-docker-socket-proxy
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: homelab-dockerproxy
    restart: unless-stopped
    privileged: true
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=0 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=0 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    networks:
      - network-homepage
    healthcheck:
      test: wget --spider http://localhost:2375/version || exit 1
      interval: 29s
      timeout: 5s
      retries: 3
      start_period: 21s

  # https://github.com/gethomepage/homepage/
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homelab-homepage
    restart: unless-stopped
    privileged: true
    # environment:
    #   # use `id` command
    #   PUID: 1000
    #   PGID: 1000
    volumes:
      # Make sure your local config directory exists
      - ./homepage/config:/app/config
      # optional, for docker integrations
      # - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - network-reverse-proxy
      - network-homepage
    depends_on:
      - dockerproxy


  # https://coder.com/docs/code-server/latest/install#docker
  coder:
    image: lscr.io/linuxserver/code-server:latest
    container_name: homelab-coder
    restart: always
    privileged: true
    environment:
      - UID=1000
      - GID=1000
      - TZ=Asia/Tokyo
      - PASSWORD= #optional
      - HASHED_PASSWORD= #optional
      - SUDO_PASSWORD= #optional
      - SUDO_PASSWORD_HASH= #optional
      - PROXY_DOMAIN= #optional
    networks:
      - network-reverse-proxy
    volumes:
      - /srv/coder/.local:/home/coder/.local
      - /srv/coder/.config:/home/coder/.config
      - /srv/coder/project:/home/coder/project
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8443/healthz"]
      interval: 1s
      timeout: 10s
      retries: 5


 # https://github.com/support-project/docker-knowledge/blob/master/docker-compose.yml
  knowledge:
    image: knowledge:revpro
    build:
      context: .
      dockerfile: ./knowledge/Dockerfile
    container_name: homelab-knowledge
    restart: always
    volumes:
      - ./knowledge/custom_connection.xml:/root/.knowledge/custom_connection.xml
      - /srv/knowledge:/root/.knowledge
    networks:
      - network-reverse-proxy
      - network-knowledge
    depends_on:
      - knowledge-db

  knowledge-db:
    image: docker.io/postgres:9
    container_name: homelab-knowledge-db
    restart: always
    environment:
      - POSTGRES_USER=knowledge_user
      - POSTGRES_PASSWORD=knowledge_password
      - POSTGRES_DB=knowledge_database
    volumes:
      # - /srv/knowledge-db/initdb:/docker-entrypoint-initdb.d
      - /srv/knowledge-db/data:/var/lib/postgresql/data
    networks:
      - network-knowledge
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s


  nextcloud:
    image: docker.io/nextcloud
    container_name: homelab-nextcloud
    restart: always
    environment:
      - MYSQL_HOST=nextcloud-db
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud_user
      - MYSQL_PASSWORD=nextcloud_password
    volumes:
      - /srv/nextcloud:/var/www/html
      - ./nextcloud/setup.sh:/root/setup.sh
    networks:
      - network-reverse-proxy
      - network-nextcloud
    depends_on:
      - nextcloud-db

  # https://mariadb.org/mariadb-server-docker-official-images-healthcheck-without-mysqladmin/
  nextcloud-db:
    image: docker.io/mariadb
    container_name: homelab-nextcloud-db
    restart: always
    environment:
      - MARIADB_DATABASE=nextcloud
      - MARIADB_ROOT_PASSWORD=nextcloud_root_pw
      - MARIADB_USER=nextcloud_user
      - MARIADB_PASSWORD=nextcloud_password
    volumes:
      - /srv/nextcloud-db:/var/lib/mysql
    networks:
      - network-nextcloud
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--su-mysql", "--connect", "--innodb_initialized" ]
      start_period: 1m
      start_interval: 10s
      interval: 1m
      timeout: 5s
      retries: 3


  # Initial Setup: username=admin, password=admin
  grafana:
    image: docker.io/grafana/grafana
    container_name: homelab-grafana
    restart: always
    environment:
      GF_SERVER_ROOT_URL: http://homelab-grafana:3000/grafana/
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_USERS_DEFAULT_THEME: light
      DS_PROMETHEUS: homelab-prometheus
    volumes:
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana/default.yaml:/etc/grafana/provisioning/dashboards/default.yaml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - network-reverse-proxy
      - network-grafana
    depends_on:
      - prometheus

  prometheus:
    image: docker.io/prom/prometheus
    container_name: homelab-prometheus
    restart: always
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - volume-prometheus:/prometheus
    networks:
      - network-grafana
    depends_on:
      - nginx-exporter
      - node-exporter
      - cadvisor

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.3.0
    container_name: homelab-nginx-exporter
    restart: always
    command:
      - --nginx.scrape-uri=http://homelab-nginx:8080/stub_status
    networks:
      - network-grafana
      - network-reverse-proxy

  node-exporter:
    image: docker.io/prom/node-exporter:latest
    container_name: homelab-node-exporter
    restart: always
    command:
      - "--path.rootfs=/host"
    volumes:
      - /:/host:ro,rslave
    networks:
      - network-grafana

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: homelab-cadvisor
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - network-grafana


networks:
  network-reverse-proxy:
    name: homelab-network-reverse-proxy
    driver: bridge
  network-gitlab:
    name: homelab-network-gitlab
  network-redmine:
    name: homelab-network-redmine
  network-homepage:
    name: homelab-network-homepage
  network-jenkins:
    name: homelab-network-jenkins
  network-knowledge:
    name: homelab-network-knowledge
  network-nextcloud:
    name: homelab-network-nextcloud
  network-grafana:
    name: homelab-network-grafana


volumes:
  volume-redmine:
    name: homelab-volume-redmine
  volume-redmine-db:
    name: homelab-volume-redmine-db
  volume-jenkins:
    name: homelab-volume-jenkins
  volume-jenkins-ssh-tmp:
    name: homelab-volume-jenkins-ssh-tmp
  volume-jenkins-ssh-agent:
    name: homelab-volume-jenkins-ssh-agent
  volume-jenkins-ssh-dot:
    name: homelab-volume-jenkins-ssh-dot
  volume-jenkins-ssh-run:
    name: homelab-volume-jenkins-ssh-run
  volume-jenkins-ssh-varrun:
    name: homelab-volume-jenkins-ssh-varrun
  volume-prometheus:
    name: homelab-volume-prometheus
  volume-phpldapadmin:
    name: homelab-volume-phpldapadmin
